name: Deploy to EC2

on:
  push:
    branches: [ master ]
  workflow_dispatch: # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Phase 1 - Environment Setup
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        command_timeout: "5m"
        script: |
          echo "🔧 PHASE 1: Environment Setup"
          echo "============================"
          
          # Setup basic environment
          mkdir -p ~/app
          cd ~/app
          
          # Setup swap space (if needed)
          if ! swapon --show | grep -q "/swapfile"; then
            sudo fallocate -l 2G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
          fi
          
          # Ensure Node.js 22 is available
          if [[ "$(node --version 2>/dev/null)" != "v22"* ]]; then
            curl -fsSL https://rpm.nodesource.com/setup_22.x | sudo bash -
            sudo yum install -y nodejs
          fi
          
          echo "✅ Environment setup complete"
          echo "Node.js: $(node --version)"
          echo "npm: $(npm --version)"
          echo "Memory: $(free -h | grep Mem)"
          
    - name: Phase 2 - Code Deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        command_timeout: "8m"
        script: |
          echo "📦 PHASE 2: Code Deployment"
          echo "==========================="
          
          cd ~/app
          
          # Clean deployment
          rm -rf multi-analysis-starter
          git clone https://github.com/${{ github.repository }}.git multi-analysis-starter
          cd multi-analysis-starter
          
          # Set memory limits
          export NODE_OPTIONS="--max-old-space-size=4096"
          
          # Install dependencies (with error handling)
          echo "Installing root dependencies..."
          npm install --no-optional || {
            echo "⚠️ Root dependencies failed, continuing..."
          }
          
          # Install package dependencies (independently)
          for package in shared api worker web; do
            echo "Installing $package dependencies..."
            cd packages/$package
            npm install --no-optional || {
              echo "⚠️ $package dependencies failed, continuing..."
            }
            cd ../..
          done
          
          # Copy data files
          echo "Setting up data files..."
          mkdir -p packages/api/data
          cp -r data/* packages/api/data/ || {
            echo "⚠️ Data file copy failed, continuing..."
          }
          
          echo "✅ Code deployment complete"
          
    - name: Phase 3 - Build Process
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        command_timeout: "5m"
        script: |
          echo "🔨 PHASE 3: Build Process"
          echo "========================="
          
          cd ~/app/multi-analysis-starter
          export NODE_OPTIONS="--max-old-space-size=4096"
          
          # Build packages (independently)
          echo "Building shared package..."
          cd packages/shared
          npm run build || {
            echo "⚠️ Shared build failed, continuing..."
          }
          cd ../..
          
          echo "Building API package..."
          cd packages/api
          npm run build || {
            echo "⚠️ API build failed, continuing..."
          }
          cd ../..
          
          echo "Building web package..."
          cd packages/web
          npm run build || {
            echo "⚠️ Web build failed, continuing..."
          }
          cd ../..
          
          echo "✅ Build process complete"
          
    - name: Phase 4 - Process Management
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        command_timeout: "8m"
        script: |
          echo "⚡ PHASE 4: Process Management"
          echo "============================="
          
          cd ~/app/multi-analysis-starter
          
          # Stop existing processes (quick)
          echo "Stopping existing processes..."
          pkill -f "node.*3000" 2>/dev/null || echo "No web process to stop"
          pkill -f "node.*3001" 2>/dev/null || echo "No API process to stop"
          sleep 2
          
          # Start API (with immediate feedback)
          echo "Starting API..."
          cd packages/api
          nohup npm start > api.log 2>&1 &
          API_PID=$!
          echo "API started with PID: $API_PID"
          cd ../..
          
          # Quick check if API started
          sleep 3
          if ps -p $API_PID > /dev/null; then
            echo "✅ API process confirmed running"
          else
            echo "⚠️ API process may have failed to start"
          fi
          
          # Start web (with immediate feedback)
          echo "Starting web..."
          cd packages/web
          export NEXT_PUBLIC_API_URL=http://localhost:3001
          nohup npm start > web.log 2>&1 &
          WEB_PID=$!
          echo "Web started with PID: $WEB_PID"
          cd ../..
          
          # Quick check if web started
          sleep 3
          if ps -p $WEB_PID > /dev/null; then
            echo "✅ Web process confirmed running"
          else
            echo "⚠️ Web process may have failed to start"
          fi
          
          echo "✅ Process management complete"
          echo "API PID: $API_PID"
          echo "Web PID: $WEB_PID"
          
    - name: Phase 5 - Verification
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        command_timeout: "2m"
        script: |
          echo "🧪 PHASE 5: Verification"
          echo "========================"
          
          cd ~/app/multi-analysis-starter
          
          # Wait for processes to start
          echo "Waiting for processes to start..."
          sleep 10
          
          # Check processes
          echo "Checking processes..."
          ps aux | grep node | grep -v grep || echo "No Node.js processes found"
          
          # Check ports
          echo "Checking ports..."
          netstat -tlnp 2>/dev/null | grep ":3000\|:3001" || echo "No processes on expected ports"
          
          # Test endpoints
          echo "Testing endpoints..."
          curl -s --connect-timeout 5 http://localhost:3001/health > /dev/null && echo "✅ API health endpoint working" || echo "❌ API health endpoint failed"
          curl -s --connect-timeout 5 http://localhost:3000 > /dev/null && echo "✅ Web endpoint working" || echo "❌ Web endpoint failed"
          
          echo "✅ Verification complete"
          echo "🌐 Frontend: http://${{ secrets.EC2_HOST }}:3000"
          echo "🔌 API: http://${{ secrets.EC2_HOST }}:3001"
          
    - name: Final Health Check
      run: |
        echo "🔍 Final health check..."
        sleep 30
        
        echo "Testing frontend..."
        if curl -f -s --connect-timeout 15 http://${{ secrets.EC2_HOST }}:3000 > /dev/null; then
          echo "✅ Frontend responding"
        else
          echo "❌ Frontend not responding"
        fi
        
        echo "Testing API..."
        if curl -f -s --connect-timeout 15 http://${{ secrets.EC2_HOST }}:3001/health > /dev/null; then
          echo "✅ API responding"
        else
          echo "❌ API not responding"
        fi
