name: Deploy to EC2

on:
  push:
    branches: [ master ]
  workflow_dispatch: # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test SSH Connection
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        script: |
          echo "🔍 Testing SSH connection..."
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          echo "Home directory: $HOME"
          echo "SSH connection successful!"
      
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        script: |
          set -e  # Exit on any error
          echo "🚀 Starting systematic deployment..."
          
          # ========================================
          # PHASE 1: ENVIRONMENT SETUP
          # ========================================
          echo "📁 Setting up environment..."
          mkdir -p ~/app
          cd ~/app
          echo "Working directory: $(pwd)"
          
          # Setup swap space
          echo "💾 Setting up swap space..."
          if ! swapon --show | grep -q "/swapfile"; then
            sudo fallocate -l 2G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
          fi
          echo "Swap space: $(free -h | grep Swap)"
          
          # ========================================
          # PHASE 2: NODE.JS SETUP
          # ========================================
          echo "🔧 Setting up Node.js 22..."
          CURRENT_NODE_VERSION=$(node --version 2>/dev/null || echo "not_installed")
          echo "Current Node.js version: $CURRENT_NODE_VERSION"
          
          if [[ "$CURRENT_NODE_VERSION" != "v22"* ]]; then
            echo "Installing Node.js 22..."
            
            # Detect OS
            if [ -f /etc/os-release ]; then
              . /etc/os-release
              OS=$NAME
            else
              OS="Amazon Linux"
            fi
            
            # Remove old Node.js
            if command -v node &> /dev/null; then
              if command -v yum &> /dev/null; then
                sudo yum remove -y nodejs npm 2>/dev/null || echo "No old Node.js to remove"
              elif command -v apt &> /dev/null; then
                sudo apt remove -y nodejs npm 2>/dev/null || echo "No old Node.js to remove"
              fi
            fi
            
            # Install Node.js 22
            if [[ "$OS" == *"Amazon Linux"* ]] || [[ "$OS" == *"Red Hat"* ]] || [[ "$OS" == *"CentOS"* ]]; then
              curl -fsSL https://rpm.nodesource.com/setup_22.x | sudo bash -
              sudo yum install -y nodejs
            else
              curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            
            # Verify installation
            if [[ "$(node --version)" != "v22"* ]]; then
              echo "❌ Node.js 22 installation failed"
              exit 1
            fi
          fi
          
          echo "✅ Node.js $(node --version) ready"
          
          # ========================================
          # PHASE 3: CODE DEPLOYMENT
          # ========================================
          echo "📦 Deploying code..."
          
          # Clean deployment
          rm -rf multi-analysis-starter
          git clone https://github.com/${{ github.repository }}.git multi-analysis-starter
          cd multi-analysis-starter
          
          # Set memory limits
          export NODE_OPTIONS="--max-old-space-size=4096"
          
          # Clean install
          echo "Installing dependencies..."
          npm cache clean --force
          rm -rf node_modules packages/*/node_modules
          rm -rf package-lock.json packages/*/package-lock.json
          
          npm install --no-optional
          
          # Install package dependencies
          for package in shared api worker web; do
            echo "Installing $package dependencies..."
            cd packages/$package
            npm install --no-optional
            cd ../..
          done
          
          # ========================================
          # PHASE 4: DATA FILES
          # ========================================
          echo "📁 Setting up data files..."
          
          # Ensure data directory exists
          mkdir -p data packages/api/data
          
          # Copy data files to both locations
          if [ -d "data" ] && [ "$(ls -A data)" ]; then
            echo "Data files found, copying..."
            cp -r data/* packages/api/data/
            echo "✅ Data files copied to API package"
          else
            echo "❌ No data files found in repository"
            exit 1
          fi
          
          # ========================================
          # PHASE 5: BUILD
          # ========================================
          echo "🔨 Building application..."
          
          # Build shared first
          cd packages/shared
          npm run build
          cd ../..
          
          # Build API
          cd packages/api
          npm run build
          cd ../..
          
          # Build web
          cd packages/web
          npm run build
          cd ../..
          
          echo "✅ All packages built successfully"
          
          # ========================================
          # PHASE 6: PROCESS MANAGEMENT
          # ========================================
          echo "⚡ Setting up process management..."
          
          # Install PM2 globally
          npm install -g pm2
          
          # Kill ALL existing Node.js processes
          echo "Stopping all existing Node.js processes..."
          pkill -f "node" 2>/dev/null || echo "No existing Node.js processes"
          sleep 3
          
          # Clear PM2
          pm2 delete all 2>/dev/null || echo "No existing PM2 processes"
          pm2 kill 2>/dev/null || echo "PM2 not running"
          
          # Start API with PM2
          echo "Starting API..."
          cd packages/api
          pm2 start npm --name "api" -- start
          cd ../..
          
          # Start web with PM2
          echo "Starting web..."
          cd packages/web
          # Set environment variable for API URL
          export NEXT_PUBLIC_API_URL=http://localhost:3001
          pm2 start npm --name "web" -- start
          cd ../..
          
          # Save PM2 configuration
          pm2 save
          pm2 startup
          
          # ========================================
          # PHASE 7: VERIFICATION
          # ========================================
          echo "🧪 Verifying deployment..."
          
          # Wait for processes to start
          sleep 10
          
          # Check PM2 status
          echo "PM2 Status:"
          pm2 list
          
          # Test API endpoints
          echo "Testing API health..."
          HEALTH_RESPONSE=$(curl -s http://localhost:3001/health 2>/dev/null || echo "FAILED")
          echo "Health response: $HEALTH_RESPONSE"
          
          echo "Testing API listings..."
          LISTINGS_RESPONSE=$(curl -s http://localhost:3001/listings 2>/dev/null | head -c 100 || echo "FAILED")
          echo "Listings response: $LISTINGS_RESPONSE"
          
          echo "Testing API rents..."
          RENTS_RESPONSE=$(curl -s http://localhost:3001/rents 2>/dev/null | head -c 100 || echo "FAILED")
          echo "Rents response: $RENTS_RESPONSE"
          
          # Check if processes are listening
          echo "Processes on ports:"
          netstat -tlnp 2>/dev/null | grep ":3000\|:3001" || echo "No processes found"
          
          echo "✅ Deployment completed!"
          echo "🌐 Frontend: http://${{ secrets.EC2_HOST }}:3000"
          echo "🔌 API: http://${{ secrets.EC2_HOST }}:3001"
          
    - name: Health Check
      run: |
        echo "🔍 Final health check..."
        sleep 30
        
        echo "Testing frontend..."
        if curl -f -s --connect-timeout 10 http://${{ secrets.EC2_HOST }}:3000 > /dev/null; then
          echo "✅ Frontend responding"
        else
          echo "❌ Frontend not responding"
        fi
        
        echo "Testing API..."
        if curl -f -s --connect-timeout 10 http://${{ secrets.EC2_HOST }}:3001/health > /dev/null; then
          echo "✅ API responding"
        else
          echo "❌ API not responding"
        fi
