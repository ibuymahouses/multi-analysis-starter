name: Deploy to EC2

on:
  push:
    branches: [ master ]
  workflow_dispatch: # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        command_timeout: "8m"
        script: |
          echo "🔍 DIAGNOSTIC DEPLOYMENT STARTING"
          echo "=================================="
          echo "Timestamp: $(date)"
          echo "User: $(whoami)"
          echo "PWD: $(pwd)"
          echo "Home: $HOME"
          echo "Memory: $(free -h)"
          echo "Disk: $(df -h /)"
          echo ""
          
          echo "STEP 1: Environment Setup"
          echo "========================="
          mkdir -p ~/app
          cd ~/app
          echo "✅ Created app directory"
          echo "Current directory: $(pwd)"
          echo ""
          
          echo "STEP 2: Node.js Check"
          echo "====================="
          echo "Node.js version: $(node --version 2>/dev/null || echo 'NOT INSTALLED')"
          echo "npm version: $(npm --version 2>/dev/null || echo 'NOT INSTALLED')"
          echo ""
          
          echo "STEP 3: Git Clone Test"
          echo "======================"
          if [ -d "multi-analysis-starter" ]; then
            echo "✅ Repository already exists"
            cd multi-analysis-starter
          else
            echo "Cloning repository..."
            git clone https://github.com/${{ github.repository }}.git multi-analysis-starter
            cd multi-analysis-starter
            echo "✅ Repository cloned"
          fi
          echo "Repository contents:"
          ls -la
          echo ""
          
          echo "STEP 4: Data Files Check"
          echo "========================"
          if [ -d "data" ]; then
            echo "✅ Data directory exists"
            echo "Data files:"
            ls -la data/
          else
            echo "❌ Data directory missing"
          fi
          echo ""
          
          echo "STEP 5: Package Structure Check"
          echo "==============================="
          if [ -d "packages" ]; then
            echo "✅ Packages directory exists"
            echo "Packages:"
            ls -la packages/
          else
            echo "❌ Packages directory missing"
          fi
          echo ""
          
          echo "STEP 6: Current Process Check"
          echo "============================"
          echo "Node.js processes:"
          ps aux | grep node | grep -v grep || echo "No Node.js processes running"
          echo ""
          echo "Ports in use:"
          netstat -tlnp 2>/dev/null | grep ":3000\|:3001" || echo "No processes on ports 3000/3001"
          echo ""
          
          echo "STEP 7: Simple API Test"
          echo "======================="
          echo "Testing if anything is responding on port 3001..."
          if curl -s --connect-timeout 5 http://localhost:3001/health > /dev/null 2>&1; then
            echo "✅ Something is responding on port 3001"
          else
            echo "❌ Nothing responding on port 3001"
          fi
          
          echo "Testing if anything is responding on port 3000..."
          if curl -s --connect-timeout 5 http://localhost:3000 > /dev/null 2>&1; then
            echo "✅ Something is responding on port 3000"
          else
            echo "❌ Nothing responding on port 3000"
          fi
          echo ""
          
          echo "DIAGNOSTIC COMPLETE"
          echo "==================="
          echo "Timestamp: $(date)"
          echo "All basic checks completed successfully"
          
    - name: Quick Health Check
      run: |
        echo "🔍 Quick external health check..."
        sleep 10
        
        echo "Testing frontend..."
        if curl -f -s --connect-timeout 10 http://${{ secrets.EC2_HOST }}:3000 > /dev/null; then
          echo "✅ Frontend responding"
        else
          echo "❌ Frontend not responding"
        fi
        
        echo "Testing API..."
        if curl -f -s --connect-timeout 10 http://${{ secrets.EC2_HOST }}:3001/health > /dev/null; then
          echo "✅ API responding"
        else
          echo "❌ API not responding"
        fi
