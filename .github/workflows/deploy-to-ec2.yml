name: Deploy to EC2

on:
  push:
    branches: [ master ]
  workflow_dispatch: # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        script: |
          set -e
          echo "🚀 Simple deployment starting..."
          
          # Setup environment
          mkdir -p ~/app
          cd ~/app
          
          # Setup swap space
          if ! swapon --show | grep -q "/swapfile"; then
            sudo fallocate -l 2G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
          fi
          
          # Ensure Node.js 22
          if [[ "$(node --version 2>/dev/null)" != "v22"* ]]; then
            curl -fsSL https://rpm.nodesource.com/setup_22.x | sudo bash -
            sudo yum install -y nodejs
          fi
          
          # Clean deployment
          rm -rf multi-analysis-starter
          git clone https://github.com/${{ github.repository }}.git multi-analysis-starter
          cd multi-analysis-starter
          
          # Set memory limits
          export NODE_OPTIONS="--max-old-space-size=4096"
          
          # Install dependencies
          echo "Installing dependencies..."
          npm install --no-optional
          
          # Install package dependencies
          for package in shared api worker web; do
            cd packages/$package
            npm install --no-optional
            cd ../..
          done
          
          # Copy data files
          echo "Setting up data files..."
          mkdir -p packages/api/data
          cp -r data/* packages/api/data/
          
          # Build packages
          echo "Building packages..."
          cd packages/shared && npm run build && cd ../..
          cd packages/api && npm run build && cd ../..
          cd packages/web && npm run build && cd ../..
          
          # Kill existing processes
          echo "Stopping existing processes..."
          pkill -f "node.*3000" 2>/dev/null || echo "No web process to kill"
          pkill -f "node.*3001" 2>/dev/null || echo "No API process to kill"
          sleep 2
          
          # Start API (simple nohup)
          echo "Starting API..."
          cd packages/api
          nohup npm start > api.log 2>&1 &
          API_PID=$!
          cd ../..
          
          # Start web (simple nohup)
          echo "Starting web..."
          cd packages/web
          export NEXT_PUBLIC_API_URL=http://localhost:3001
          nohup npm start > web.log 2>&1 &
          WEB_PID=$!
          cd ../..
          
          # Wait for processes to start
          echo "Waiting for processes to start..."
          sleep 10
          
          # Verify processes are running
          echo "Checking processes..."
          if ps -p $API_PID > /dev/null; then
            echo "✅ API process running (PID: $API_PID)"
          else
            echo "❌ API process failed to start"
            echo "API logs:"
            tail -20 packages/api/api.log
          fi
          
          if ps -p $WEB_PID > /dev/null; then
            echo "✅ Web process running (PID: $WEB_PID)"
          else
            echo "❌ Web process failed to start"
            echo "Web logs:"
            tail -20 packages/web/web.log
          fi
          
          # Test API
          echo "Testing API..."
          sleep 5
          curl -s http://localhost:3001/health || echo "Health endpoint failed"
          curl -s http://localhost:3001/listings | head -c 100 || echo "Listings endpoint failed"
          curl -s http://localhost:3001/rents | head -c 100 || echo "Rents endpoint failed"
          
          # Check ports
          echo "Processes on ports:"
          netstat -tlnp 2>/dev/null | grep ":3000\|:3001" || echo "No processes found"
          
          echo "✅ Deployment completed!"
          echo "🌐 Frontend: http://${{ secrets.EC2_HOST }}:3000"
          echo "🔌 API: http://${{ secrets.EC2_HOST }}:3001"
          
    - name: Health Check
      run: |
        echo "🔍 Final health check..."
        sleep 30
        
        echo "Testing frontend..."
        if curl -f -s --connect-timeout 10 http://${{ secrets.EC2_HOST }}:3000 > /dev/null; then
          echo "✅ Frontend responding"
        else
          echo "❌ Frontend not responding"
        fi
        
        echo "Testing API..."
        if curl -f -s --connect-timeout 10 http://${{ secrets.EC2_HOST }}:3001/health > /dev/null; then
          echo "✅ API responding"
        else
          echo "❌ API not responding"
        fi
