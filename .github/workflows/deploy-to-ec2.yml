name: Deploy to EC2

on:
  push:
    branches: [ master ]
  workflow_dispatch: # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test SSH Connection
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        script: |
          echo "🔍 Testing SSH connection..."
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          echo "Home directory: $HOME"
          echo "SSH connection successful!"
      
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        script: |
          set -e  # Exit on any error
          echo "🚀 Starting automatic deployment from GitHub..."
          
          # Create app directory if it doesn't exist
          mkdir -p ~/app
          cd ~/app
          echo "📁 Working directory: $(pwd)"
          
          # Setup swap space to handle memory constraints
          echo "💾 Setting up swap space for memory management..."
          if ! swapon --show | grep -q "/swapfile"; then
            echo "Creating swap file..."
            sudo fallocate -l 2G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
          fi
          echo "Swap space: $(free -h | grep Swap)"
          
          # Ensure Node.js 22 is installed
          echo "🔍 Checking Node.js environment..."
          CURRENT_NODE_VERSION=$(node --version 2>/dev/null || echo "not_installed")
          echo "Current Node.js version: $CURRENT_NODE_VERSION"
          
          if [[ "$CURRENT_NODE_VERSION" != "v22"* ]]; then
            echo "🔄 Updating to Node.js 22..."
            
            # Remove old Node.js if present
            if command -v node &> /dev/null; then
              echo "Removing old Node.js installation..."
              sudo apt remove -y nodejs npm 2>/dev/null || echo "No old Node.js to remove"
            fi
            
            # Install Node.js 22
            echo "Installing Node.js 22..."
            curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
            sudo apt-get install -y nodejs
            
            # Verify installation
            echo "Node.js version: $(node --version)"
            echo "npm version: $(npm --version)"
            
            if [[ "$(node --version)" != "v22"* ]]; then
              echo "❌ Failed to install Node.js 22"
              exit 1
            fi
          else
            echo "✅ Node.js 22 already installed"
          fi
          
          # Update npm to latest version
          echo "🔄 Updating npm to latest version..."
          sudo npm install -g npm@latest
          echo "Updated npm version: $(npm --version)"
          
          # Check if git repository exists
          if [ -d "multi-analysis-starter" ]; then
            echo "📁 Found existing repository, pulling latest changes..."
            cd multi-analysis-starter
            
            # Check current branch
            echo "Current branch: $(git branch --show-current)"
            
            # Stash any local changes (if any)
            git stash || echo "No changes to stash"
            
            # Pull latest changes from master branch
            git pull origin master
            
            # If there were stashed changes, pop them back
            git stash pop 2>/dev/null || echo "No stashed changes to pop"
          else
            echo "📁 No existing repository found, cloning fresh..."
            rm -rf multi-analysis-starter
            git clone https://github.com/${{ github.repository }}.git multi-analysis-starter
            cd multi-analysis-starter
          fi
          
          # Set Node.js memory limits
          export NODE_OPTIONS="--max-old-space-size=4096"
          echo "🔧 Set NODE_OPTIONS: $NODE_OPTIONS"
          
          # Clear npm cache and node_modules to ensure clean install
          echo "🧹 Cleaning npm cache and node_modules..."
          npm cache clean --force || echo "npm cache clean failed (continuing)"
          rm -rf node_modules || echo "No root node_modules to remove"
          rm -rf packages/*/node_modules || echo "No package node_modules to remove"
          rm -rf packages/*/package-lock.json || echo "No package-lock files to remove"
          
          echo "📦 Installing dependencies..."
          echo "Installing root dependencies..."
          npm install --no-optional || {
            echo "❌ Failed to install root dependencies"
            echo "npm error log:"
            npm ls --depth=0 || echo "npm ls failed"
            exit 1
          }
          
          echo "Installing shared package dependencies..."
          cd packages/shared
          npm install --no-optional || {
            echo "❌ Failed to install shared package dependencies"
            exit 1
          }
          cd ../..
          
          echo "Installing API package dependencies..."
          cd packages/api
          npm install --no-optional || {
            echo "❌ Failed to install API package dependencies"
            exit 1
          }
          cd ../..
          
          echo "Installing worker package dependencies..."
          cd packages/worker
          npm install --no-optional || {
            echo "❌ Failed to install worker package dependencies"
            exit 1
          }
          cd ../..
          
          echo "Installing web package dependencies (with memory optimization)..."
          # Install web dependencies with memory optimization
          cd packages/web
          npm install --no-optional --production=false || {
            echo "❌ Failed to install web package dependencies"
            echo "Trying with reduced memory usage..."
            npm install --no-optional --production=false --maxsockets=1 || {
              echo "❌ Web package installation failed even with reduced memory"
              exit 1
            }
          }
          cd ../..
          
          echo "🔨 Building application..."
          echo "Building shared package..."
          npm run build --prefix packages/shared || {
            echo "❌ Failed to build shared package"
            exit 1
          }
          
          echo "Building API package..."
          npm run build --prefix packages/api || {
            echo "❌ Failed to build API package"
            exit 1
          }
          
          echo "Building web package..."
          npm run build --prefix packages/web || {
            echo "❌ Failed to build web package"
            exit 1
          }
          
          echo "🔄 Restarting application..."
          
          # Check which deployment method is being used
          if [ -f "docker-compose.yml" ] || [ -f "docker-compose.prod.yml" ]; then
            echo "🐳 Restarting Docker containers..."
            if [ -f "docker-compose.prod.yml" ]; then
              docker-compose -f docker-compose.prod.yml down || echo "Docker compose down failed (might not be running)"
              docker-compose -f docker-compose.prod.yml up -d --build
            else
              docker-compose down || echo "Docker compose down failed (might not be running)"
              docker-compose up -d --build
            fi
          elif command -v pm2 &> /dev/null; then
            echo "⚡ Restarting PM2 processes..."
            pm2 restart all || echo "PM2 restart failed (might not be running)"
          elif systemctl is-active --quiet multi-analysis; then
            echo "🔧 Restarting systemd service..."
            sudo systemctl restart multi-analysis
          else
            echo "⚠️  No known process manager found. Please restart manually."
            echo "Available process managers:"
            command -v docker-compose && echo "- Docker Compose available"
            command -v pm2 && echo "- PM2 available"
            systemctl list-units --type=service | grep multi-analysis && echo "- systemd service available"
          fi
          
          echo "✅ Automatic deployment completed successfully!"
          echo "🌐 Frontend: http://${{ secrets.EC2_HOST }}:3000"
          echo "🔌 API: http://${{ secrets.EC2_HOST }}:3001"
          
    - name: Health Check
      run: |
        echo "🔍 Performing health check..."
        echo "Waiting 30 seconds for services to start..."
        sleep 30
        
        echo "Testing frontend connection..."
        # Check if frontend is responding
        if curl -f -s --connect-timeout 10 http://${{ secrets.EC2_HOST }}:3000 > /dev/null; then
          echo "✅ Frontend is responding"
        else
          echo "❌ Frontend is not responding"
          echo "This might be normal if the app isn't running yet or uses a different port"
        fi
        
        echo "Testing API connection..."
        # Check if API is responding
        if curl -f -s --connect-timeout 10 http://${{ secrets.EC2_HOST }}:3001 > /dev/null; then
          echo "✅ API is responding"
        else
          echo "❌ API is not responding"
          echo "This might be normal if the app isn't running yet or uses a different port"
        fi
        
        echo "🎉 Health check completed!"
        echo "Note: Health check failures don't necessarily mean deployment failed"
