# Deploy to EC2
# Test deployment with timeout fixes
name: Deploy to EC2

on:
  push:
    branches: [ master ]
  workflow_dispatch: # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Phase 1 - Environment Setup
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        command_timeout: "5m"
        script: |
          echo "üîß PHASE 1: Environment Setup"
          echo "============================"
          
          # Setup basic environment
          mkdir -p ~/app
          cd ~/app
          
          # Setup swap space (if needed)
          if ! swapon --show | grep -q "/swapfile"; then
            sudo fallocate -l 2G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
          fi
          
          # Ensure Node.js 22 is available
          if [[ "$(node --version 2>/dev/null)" != "v22"* ]]; then
            curl -fsSL https://rpm.nodesource.com/setup_22.x | sudo bash -
            sudo yum install -y nodejs
          fi
          
          echo "‚úÖ Environment setup complete"
          echo "Node.js: $(node --version)"
          echo "npm: $(npm --version)"
          echo "Memory: $(free -h | grep Mem)"
          
    - name: Phase 2 - Code Deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        command_timeout: "8m"
        script: |
          echo "üì¶ PHASE 2: Code Deployment"
          echo "==========================="
          
          cd ~/app
          
          # Clean deployment
          rm -rf multi-analysis-starter
          git clone https://github.com/${{ github.repository }}.git multi-analysis-starter
          cd multi-analysis-starter
          
          # Set memory limits
          export NODE_OPTIONS="--max-old-space-size=4096"
          
          # Install dependencies (with error handling)
          echo "Installing root dependencies..."
          npm install --no-optional || {
            echo "‚ö†Ô∏è Root dependencies failed, continuing..."
          }
          
          # Install package dependencies (independently)
          for package in shared api worker web; do
            echo "Installing $package dependencies..."
            cd packages/$package
            npm install --no-optional || {
              echo "‚ö†Ô∏è $package dependencies failed, continuing..."
            }
            cd ../..
          done
          
          # Copy data files
          echo "Setting up data files..."
          mkdir -p packages/api/data
          cp -r data/* packages/api/data/ || {
            echo "‚ö†Ô∏è Data file copy failed, continuing..."
          }
          
          echo "‚úÖ Code deployment complete"
          
    - name: Phase 3 - Build Process
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        command_timeout: "5m"
        script: |
          echo "üî® PHASE 3: Build Process"
          echo "========================="
          
          cd ~/app/multi-analysis-starter
          export NODE_OPTIONS="--max-old-space-size=4096"
          
          # Build packages (independently)
          echo "Building shared package..."
          cd packages/shared
          echo "Current directory: $(pwd)"
          echo "Contents before build:"
          ls -la
          echo ""
          echo "Running npm run build..."
          if ! npm run build; then
            echo "‚ùå Shared build failed - deployment cannot continue"
            echo "Build error details:"
            echo "Contents after failed build:"
            ls -la
            exit 1
          fi
          echo "‚úÖ Shared build successful"
          echo "Contents after build:"
          ls -la
          cd ../..
          
          echo "Building API package..."
          cd packages/api
          echo "Current directory: $(pwd)"
          echo "Contents before build:"
          ls -la
          echo ""
          echo "Running npm run build..."
          if ! npm run build; then
            echo "‚ùå API build failed - deployment cannot continue"
            echo "Build error details:"
            echo "Contents after failed build:"
            ls -la
            echo ""
            if [ -d "dist" ]; then
              echo "dist directory exists but may be incomplete:"
              ls -la dist/
            else
              echo "dist directory does not exist"
            fi
            exit 1
          fi
          echo "‚úÖ API build successful"
          echo "Contents after build:"
          ls -la
          if [ -d "dist" ]; then
            echo "dist directory contents:"
            ls -la dist/
          fi
          cd ../..
          
          echo "Building web package..."
          cd packages/web
          echo "Current directory: $(pwd)"
          echo "Contents before build:"
          ls -la
          echo ""
          echo "Running npm run build..."
          if ! npm run build; then
            echo "‚ùå Web build failed - deployment cannot continue"
            echo "Build error details:"
            echo "Contents after failed build:"
            ls -la
            exit 1
          fi
          echo "‚úÖ Web build successful"
          echo "Contents after build:"
          ls -la
          if [ -d ".next" ]; then
            echo ".next directory contents:"
            ls -la .next/
          fi
          cd ../..
          
          echo "‚úÖ Build process complete"
          
          # Verify build outputs exist
          echo "Verifying build outputs..."
          if [ ! -d "packages/api/dist" ]; then
            echo "‚ùå API dist directory not found - build verification failed"
            exit 1
          fi
          if [ ! -d "packages/web/.next" ]; then
            echo "‚ùå Web .next directory not found - build verification failed"
            exit 1
          fi
          echo "‚úÖ Build verification complete"
          
    - name: Phase 4 - Process Management
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        command_timeout: "5m"
        timeout: "5m"
        proxy_timeout: "5m"
        script_stop: false
        script: |
          echo "‚ö° PHASE 4: PID-Based Process Management"
          echo "======================================"
          echo "Start time: $(date)"
          echo "User: $(whoami)"
          echo "PWD: $(pwd)"
          echo "Memory: $(free -h | grep Mem)"
          echo ""
          
          cd ~/app/multi-analysis-starter
          echo "Changed to app directory: $(pwd)"
          
          echo "Checking if directories exist:"
          ls -la packages/
          echo ""
          
          # Check what's currently running
          echo "Current Node.js processes:"
          ps aux | grep node | grep -v grep || echo "No Node.js processes"
          echo ""
          
          # Kill processes by PID (much faster than pattern matching)
          echo "Killing processes by PID..."
          
          # Get PIDs of processes using our target ports
          API_PID_TO_KILL=$(netstat -tlnp 2>/dev/null | grep ":3001 " | awk '{print $7}' | cut -d'/' -f1 | head -1)
          WEB_PID_TO_KILL=$(netstat -tlnp 2>/dev/null | grep ":3000 " | awk '{print $7}' | cut -d'/' -f1 | head -1)
          
          if [ ! -z "$API_PID_TO_KILL" ]; then
            echo "Killing process $API_PID_TO_KILL on port 3001..."
            kill -TERM $API_PID_TO_KILL 2>/dev/null || echo "Process $API_PID_TO_KILL already gone"
          else
            echo "No process on port 3001"
          fi
          
          if [ ! -z "$WEB_PID_TO_KILL" ]; then
            echo "Killing process $WEB_PID_TO_KILL on port 3000..."
            kill -TERM $WEB_PID_TO_KILL 2>/dev/null || echo "Process $WEB_PID_TO_KILL already gone"
          else
            echo "No process on port 3000"
          fi
          
          sleep 2
          
          # Check what's left after killing
          echo "Processes after killing:"
          ps aux | grep node | grep -v grep || echo "No Node.js processes"
          echo ""
          
          # Start API
          echo "Starting API..."
          cd packages/api
          echo "API directory: $(pwd)"
          echo "API package.json exists: $([ -f package.json ] && echo 'YES' || echo 'NO')"
          
          # Check if dist directory exists
          if [ ! -d "dist" ]; then
            echo "‚ùå API dist directory not found - cannot start API"
            echo "Build verification failed. Check Phase 3 logs for build errors."
            exit 1
          fi
          echo "‚úÖ API dist directory found"
          
          # Start API
          nohup npm start > api.log 2>&1 &
          API_PID=$!
          echo "API started with PID: $API_PID at $(date)"
          
          # Verify API process started
          sleep 3
          if ps -p $API_PID > /dev/null; then
            echo "‚úÖ API process confirmed running (PID: $API_PID)"
          else
            echo "‚ùå API process failed to start"
            echo "API log contents:"
            tail -10 api.log
          fi
          cd ../..
          
          # Start web
          echo "Starting web..."
          cd packages/web
          echo "Web directory: $(pwd)"
          echo "Web package.json exists: $([ -f package.json ] && echo 'YES' || echo 'NO')"
          
          # Check if .next directory exists (Next.js build output)
          if [ ! -d ".next" ]; then
            echo "‚ùå Web .next directory not found - cannot start web server"
            echo "Build verification failed. Check Phase 3 logs for build errors."
            exit 1
          fi
          echo "‚úÖ Web .next directory found"
          
          # Set environment variable
          export NEXT_PUBLIC_API_URL=http://localhost:3001
          echo "Set NEXT_PUBLIC_API_URL: $NEXT_PUBLIC_API_URL"
          
          # Start web
          nohup npm start > web.log 2>&1 &
          WEB_PID=$!
          echo "Web started with PID: $WEB_PID at $(date)"
          
          # Verify web process started
          sleep 3
          if ps -p $WEB_PID > /dev/null; then
            echo "‚úÖ Web process confirmed running (PID: $WEB_PID)"
          else
            echo "‚ùå Web process failed to start"
            echo "Web log contents:"
            tail -10 web.log
          fi
          cd ../..
          
          # Final status check
          echo ""
          echo "Final status at $(date):"
          echo "API PID: $API_PID"
          echo "Web PID: $WEB_PID"
          echo "All Node.js processes:"
          ps aux | grep node | grep -v grep || echo "No Node.js processes"
          echo ""
          echo "Port usage:"
          netstat -tlnp 2>/dev/null | grep ":300[0-9]" || echo "No processes on ports 3000-3009"
          echo ""
          echo "‚úÖ PID-based process management complete"
          
    - name: Phase 5 - Verification
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        command_timeout: "2m"
        script: |
          echo "üß™ PHASE 5: Verification"
          echo "========================"
          
          cd ~/app/multi-analysis-starter
          
          # Wait for processes to start
          echo "Waiting for processes to start..."
          sleep 10
          
          # Check processes
          echo "Checking processes..."
          ps aux | grep node | grep -v grep || echo "No Node.js processes found"
          
          # Check ports
          echo "Checking ports..."
          netstat -tlnp 2>/dev/null | grep ":3000\|:3001" || echo "No processes on expected ports"
          
          # Test endpoints
          echo "Testing endpoints..."
          curl -s --connect-timeout 5 http://localhost:3001/health > /dev/null && echo "‚úÖ API health endpoint working" || echo "‚ùå API health endpoint failed"
          curl -s --connect-timeout 5 http://localhost:3000 > /dev/null && echo "‚úÖ Web endpoint working" || echo "‚ùå Web endpoint failed"
          
          echo "‚úÖ Verification complete"
          echo "üåê Frontend: http://${{ secrets.EC2_HOST }}:3000"
          echo "üîå API: http://${{ secrets.EC2_HOST }}:3001"
          
    - name: Final Health Check
      run: |
        echo "üîç Final health check..."
        sleep 30
        
        echo "Testing frontend..."
        if curl -f -s --connect-timeout 15 http://${{ secrets.EC2_HOST }}:3000 > /dev/null; then
          echo "‚úÖ Frontend responding"
        else
          echo "‚ùå Frontend not responding"
        fi
        
        echo "Testing API..."
        if curl -f -s --connect-timeout 15 http://${{ secrets.EC2_HOST }}:3001/health > /dev/null; then
          echo "‚úÖ API responding"
        else
          echo "‚ùå API not responding"
        fi
